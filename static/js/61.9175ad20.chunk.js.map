{"version":3,"file":"static/js/61.9175ad20.chunk.js","mappings":"kTACaA,EAAkB,mCAAG,8FACnBC,EAAAA,EAAAA,IACX,6FAF8B,mFAAH,qDAKlBC,EAAc,mCAAG,WAAMC,GAAN,iFACfF,EAAAA,EAAAA,IAAA,6CAC2BE,EAD3B,8CADe,mFAAH,sDAKdC,EAAmB,mCAAG,WAAMD,GAAN,iFACpBF,EAAAA,EAAAA,IAAA,6CAC2BE,EAD3B,sDADoB,mFAAH,sDAKnBE,EAAmB,mCAAG,WAAMF,GAAN,iFACpBF,EAAAA,EAAAA,IAAA,6CAC2BE,EAD3B,sDADoB,mFAAH,sDAKnBG,EAAgB,mCAAG,WAAMC,GAAN,iFACjBN,EAAAA,EAAAA,IAAA,0DACwCM,EADxC,8CADiB,mFAAH,qD,8KCnBhBC,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,sOAWVE,EAAMF,EAAAA,GAAAA,IAAH,8C,SCRHG,EAAW,SAAC,GAAc,IAAD,IAAXC,EAAW,EAAXA,KACnBC,GAAWC,EAAAA,EAAAA,MACTC,GAAYC,EAAAA,EAAAA,QAAOH,GAAnBE,QACR,GAAKH,EAGL,OACE,4BACE,4BACE,UAACL,EAAD,CAAYU,GAAE,oBAAEF,EAAQG,aAAV,aAAE,EAAeC,YAAjB,QAAyB,IAAvC,WACE,SAAC,MAAD,IAAkB,eAEpB,mBACA,SAACT,EAAD,CACEU,IAAG,0CAAqCR,EAAKS,aAC7CC,IAAKV,EAAKW,YAGd,2BACE,2BACE,uBAAIX,EAAKW,SACT,yBAAG,cAEAC,KAAKC,MAA0B,IAApBb,EAAKc,cACdC,WACAC,MAAM,EAAG,GAAG,WAInB,2BACE,uBAAG,cACH,uBAAIhB,EAAKiB,eAEX,2BACE,uBAAG,YACH,uBAAIjB,EAAKkB,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAGlD,2BACE,yBACE,SAAC,KAAD,CAAMjB,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,kBAGvB,SAAC,EAAAkB,SAAD,WACE,SAAC,KAAD,QAIP,E,oBC1BD,EAxBa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOxB,EAAP,KAAayB,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACQrC,GAAYsC,EAAAA,EAAAA,MAAZtC,QAcR,OAbAuC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBH,EAAS,MAFQ,UAGMtC,EAAAA,EAAAA,IAAeC,GAHrB,OAGXyC,EAHW,OAIjBN,EAAQM,EAASC,MAJA,gDAMjBL,EAAS,EAAD,IACRM,QAAQC,IAAR,MAPiB,yDAAH,qDAUlBJ,GACD,GAAE,CAACxC,KAEF,gCACGoC,GAASS,EAAAA,GAAAA,QAAcT,IACxB,SAAC3B,EAAD,CAAUC,KAAMA,IAAQ,MAG7B,C","sources":["API/fetchFilm.js","components/FilmInfo/FilmInfo.styled.js","components/FilmInfo/FilmInfo.jsx","pages/FilmPage.jsx"],"sourcesContent":["import axios from 'axios';\nexport const fetchFilmsTrending = async () => {\n  return await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/week?api_key=14b7b0dab2e9101796b24880530a0048'\n  );\n};\nexport const fetchFilmsById = async movieId => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=14b7b0dab2e9101796b24880530a0048`\n  );\n};\nexport const fetchCreditsForFilm = async movieId => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=14b7b0dab2e9101796b24880530a0048`\n  );\n};\nexport const fetchReviewsForFilm = async movieId => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=14b7b0dab2e9101796b24880530a0048`\n  );\n};\nexport const fetchFimsByQuery = async query => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=14b7b0dab2e9101796b24880530a0048`\n  );\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: white;\n  background-color: black;\n  display: inline-flex;\n  align-items: center;\n  padding: 5px;\n  border-radius: 4px;\n  margin-bottom: 10px;\n  margin-left: 25px;\n`;\nexport const Img = styled.img`\n  margin-left: 25px;\n`;\n","import { useRef, Suspense } from 'react';\nimport { Link, Outlet, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { IoIosArrowBack } from 'react-icons/io';\nimport { StyledLink, Img } from './FilmInfo.styled';\nexport const FilmInfo = ({ film }) => {\n  const location = useLocation();\n  const { current } = useRef(location);\n  if (!film) {\n    return;\n  }\n  return (\n    <div>\n      <div>\n        <StyledLink to={current.state?.from ?? '/'}>\n          <IoIosArrowBack /> Go back\n        </StyledLink>\n        <br />\n        <Img\n          src={`https://image.tmdb.org/t/p/w200/${film.poster_path}`}\n          alt={film.title}\n        />\n      </div>\n      <ul>\n        <li>\n          <p>{film.title}</p>\n          <p>\n            User score:\n            {Math.round(film.vote_average * 100)\n              .toString()\n              .slice(0, 2)}\n            %\n          </p>\n        </li>\n        <li>\n          <p>Overview</p>\n          <p>{film.overview}</p>\n        </li>\n        <li>\n          <p>Genres</p>\n          <p>{film.genres.map(genre => genre.name).join(', ')}</p>\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\nFilmInfo.propTypes = {\n  film: PropTypes.shape({\n    poster_path: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }),\n};\n","import { FilmInfo } from 'components/FilmInfo/FilmInfo';\nimport { fetchFilmsById } from '../API/fetchFilm';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst Film = () => {\n  const [film, setFilm] = useState(null);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  useEffect(() => {\n    const fetchFilmsId = async () => {\n      try {\n        setError(null);\n        const response = await fetchFilmsById(movieId);\n        setFilm(response.data);\n      } catch (error) {\n        setError(error);\n        console.log(error);\n      }\n    };\n    fetchFilmsId();\n  }, [movieId]);\n  return (\n    <>\n      {error && toast.warning(error)}\n      <FilmInfo film={film} />;\n    </>\n  );\n};\nexport default Film;\n"],"names":["fetchFilmsTrending","axios","fetchFilmsById","movieId","fetchCreditsForFilm","fetchReviewsForFilm","fetchFimsByQuery","query","StyledLink","styled","Link","Img","FilmInfo","film","location","useLocation","current","useRef","to","state","from","src","poster_path","alt","title","Math","round","vote_average","toString","slice","overview","genres","map","genre","name","join","Suspense","useState","setFilm","error","setError","useParams","useEffect","fetchFilmsId","response","data","console","log","toast"],"sourceRoot":""}